options {
    IGNORE_CASE = true;
    STATIC = false;
    BUILD_PARSER = true;
    ERROR_REPORTING = true;
    LOOKAHEAD = 1;
}

PARSER_BEGIN(AnalizadorARM)
import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class AnalizadorARM {

    static int paraCount1 = 1;
    static int paraCount2 = 1;
    private SymbolTable tablaParametros = new SymbolTable();

    //Array que guarda los Errores encontrados en el codigo que se ejecuta
    static ArrayList<String> tabla = AnalizadorARMTokenManager.tablaErrores;
    //Array que guarda los Errores semanticos encontrados en el codigo
    static ArrayList<String> tabla2 = new ArrayList<String>();

    static CppTranslator translator = new CppTranslator();
  
    //Generamos una tabla de simbolos
    private SymbolTable tablaSimbolos = new SymbolTable();

    public static void main(String[] args) {
        try {
            // Guarda el primer archivo mandado
            String nombreArchivo = args[0];
            //Genera un FileReader para leer el archivo y da el archivo como parametro
            FileReader lector = new FileReader(nombreArchivo);
            //Crea una instancia de AnalizadorARM, pasando el lector del archivo como argumento.
            AnalizadorARM parser = new AnalizadorARM(lector);

            translator.generateHeader();

            //Llama al método parse para comenzar el análisis léxico y sintáctico del archivo.
            parser.parse(nombreArchivo);

            //System.out.println(translator.getCode());
            try {
                FileWriter writer = new FileWriter("output.cpp");
                writer.write(translator.getCode());
                writer.close();
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
     
            //Si se encuentras algun objeto en la lista tabla es que hay un error sintatico asi que se imprime el error
            if (tabla.size() != 0) {
                System.out.println("\n ==================================================================================== \n");
                System.out.println("\n** Se encontraron errores sintácticos en el código **\n");
                for (String error : tabla) {
                    System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ \n");
                    System.out.println(error);
                }
            } else { //Si no hay ningun error se meciona y se sigue
                System.out.println("\n ==================================================================================== \n");
                System.out.println("\t ** NO se encontraron errores sintácticos en el código ** ");
            }

            if (tabla2.size() != 0) {
                System.out.println("\n ==================================================================================== \n");
                System.out.println("\n** Se encontraron errores semanticos en el código **\n");
                for (int i = 0; tabla2.size() > i; i++ ) {
                    System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ \n");
                    System.out.println(tabla2.get(i));
                }
            } else { //Si no hay ningun error se meciona y se sigue
                System.out.println("\n ==================================================================================== \n");
                System.out.println("\t ** NO se encontraron errores semanticos en el código ** ");
            }
        } catch (FileNotFoundException fe) {
            System.out.println(fe.getMessage());
        } catch (IOException io) {
            System.out.println(io.getMessage());
        }
    }

    //Aqui se lee los tokems y se pasan por el analizis sintatico y lexico
    public void parse(String nombreArchivo) throws IOException {
        Token token; //Se genera una variable tipo Token para guardar las variables del texto
        int columna = 1; // Contador de columna
        FileReader lector = new FileReader(nombreArchivo); //Se genera otro Redactor para leer el archivo
        //Genera tokems desde el archivo de entrada
        AnalizadorARMTokenManager lexicManager = new AnalizadorARMTokenManager(new SimpleCharStream(lector));


        //Variables para saber si hay errores y saber si se analizo todo el archivo
        boolean seEncontraronErrores = false;
        boolean seVerificaronTokens = false;

        // Analiza los tokens léxicos hasta el final del archivo
        while ((token = lexicManager.getNextToken()).kind != AnalizadorARMConstants.EOF) {
            seVerificaronTokens = true;
            if (token.specialToken != null) { //Detecta si el tokem es especial y ajusta el contador de columna
                String specialTokenImage = token.specialToken.image;
                for (int i = 0; i < specialTokenImage.length(); i++) {
                    if (specialTokenImage.charAt(i) == '\n') {
                        columna = 1; // Reiniciar el contador de columna en cada salto de línea
                    }
                }
            }
            if (token.kind == AnalizadorARMConstants.ERROR) { //Si se encuentra un error se comunica
                if (!seEncontraronErrores) {
                    System.out.print("\t ** Se encontraron errores léxicos en el código ** \n");
                    seEncontraronErrores = true;
                } //Se muestra el tokem y la linea y columna
                System.out.print("Error léxico en línea " + (token.beginLine) + ", columna " + columna + "\n");
                System.out.print("Carácter inválido: " + (char) token.image.charAt(0) + "\n");
            } else {
                columna += token.image.length(); // Incrementar el contador de columna por la longitud del token
            }
        }
        //Si no se encontraron se comunica
        if (!seEncontraronErrores && seVerificaronTokens) {
            System.out.print("\t ** NO se encontraron errores léxicos en el código ** \n");
        }

        // Ahora intenta analizar la gramática
        try {
            principal();  // Aquí comienza el análisis de la gramática
        } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }
    }

    //Traduce el mensaje de error
    String manejarErrorSintactico(ParseException e) {
        // Traduce el mensaje de error de inglés a español
        String mensajeOriginal = e.getMessage();
        String mensajeTraducido = mensajeOriginal
            .replace("Encountered", "Encontrado")
            .replace("at line", "en la línea")
            .replace("column", "columna")
            .replace("Was expecting:", "Se esperaba:")
            .replace("Was expecting one of:", "Se espera una de estas opciones:");

        // Retorna el mensaje de error traducido
        return "Error sintáctico: " + mensajeTraducido + "\n" + "Token actual: " + e.currentToken + "\n";

    }
}
PARSER_END(AnalizadorARM)

SKIP:
{
   " "
   |"\t"
   |"\r"
}

SPECIAL_TOKEN:
{
   "\n"
}

TOKEN: //Variables
{
    <ENT: "ent">
    | <FLOT: "flot">
    | <BOOL: "bool">
    | <CAD: "cad">
    | <VAR: "var">
}

TOKEN: //Operadores Logicos-Aritmeticos
{
    <MAS: "mas">
    | <MENOS: "menos">
    | <MULT: "mult">
    | <DIV: "div">
    | <RES: "res">
    | <INC: "inc">
    | <DEC: "dec">
    | <AND: "AND">
    | <OR: "OR">
    | <NOT: "NOT">
}

TOKEN: //Comparadores
{
    <IGUALDAD: "==">
    | <IGUAL: "=">
    | <DESIGUALDAD: "!=">
    | <MAYOR: ">">
    | <MENOR: "<">
    | <MAYORIGUAL: ">=">
    | <MENORIGUAL: "<=">
}

TOKEN: //DIGITOS
{
    <ENTEROS: (["0"-"9"])+>
    | <NUMERODECIMAL: (["0"-"9"])*("."["0"-"9"])+>
}

TOKEN: //CICLOS
{
    <FOR: "for">
    | <WHILE: "while">
}

TOKEN: //ARREGLOS
{
    <MATRIZ: "matrix">
    | <VECTOR: "vec">
}

TOKEN: //CONDICIONALES
{
    <SI: "SI">
    | <SINO: "SINO">
}

TOKEN: //LECTURA
{
    <LEER: "leer">
}

TOKEN: //ESCRITURA
{
    <ESCRIBIR: "escribir">
}

TOKEN: //SIMBOLOS DE DELIMITACION
{
    <PUNTO: ".">
    | <DELIMITADOR: ";">
    | <COMA: ",">
    | <CORCHIZQ: "[">
    | <CORCHDER: "]">
    | <LLAVEIZQ: "{">
    | <LLAVEDER: "}">
    | <PARENIZQ: "(">
    | <PARENDER: ")">
    | <CONCATENAR: "+">
}

TOKEN: //Palabras Reservadas
{
    <VOID: "void">
    | <PUBLICO: "publico">
    | <PRIVADO: "privado">
    | <ESTATICO: "estatico">
    | <RETURN: "return">
}

TOKEN:
{
    <MATH: "Math">
    | <ARRAYCLASS: "Array">
    | <RANDOMCLASS: "Random">
    | <TIMERCLASS: "Timer">
}

TOKEN: //FUNCIONES DE CLASES
{
    <RAMDONFUNC: (<RANDOMCLASS>)"."("next"|"equals")>
    | <ARRAYFUNC: (<ARRAYCLASS>)"."("clear"|"clone"|"copy"|"reverse")>
    | <TIMERFUNC: (<TIMERCLASS>)"."("start"|"stop")>
    | <MATHFUNC: (<MATH>)"."("abs"|"acos"|"acosh"|"tan"|"cos"|"sen"|"random"|"sqrt")>
    | <INICIO: "Inicio">
    | <FIN: "Fin">
    | <MAIN: "Main()">
    | <PROC: "proc">
    | <FUNC: "func">
}

TOKEN: // IDENTIFICADOR
{
    <IDENTIFICADOR: ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9", "_"])*>
}

TOKEN: //Reconocimiento de valores
{
    <VCAD: "\""(["a"-"z"]|["A"-"Z"]|["0"-"9"]|[","]|["."]|[" "]|[":"]|["="])+"\"">
}

TOKEN: // Manejo de Errores
{
    <ERROR: ~[]>
}

TOKEN_MGR_DECLS : {
    static ArrayList<String> tablaErrores = new ArrayList<String>();
}

void principal() :{} 
{
    try {
        {tablaSimbolos.enterScope();}
        <INICIO> <IDENTIFICADOR> <LLAVEIZQ>
        (
            Codigo()
        )+
        <LLAVEDER> <FIN>
        {tablaSimbolos.exitScope();}
    } catch (ParseException e) {
        tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
    }
}

void Codigo() : {}
{
        declararVariable()
        | gramaticaEscribir()
        | gramaticaLeer()
        | gramaticaSi()
        | gramaticaWhile()
        | gramaticaAsignacion()
        | gramaticaOperadorLogico()
        | gramaticaFor()
        //| inicializarArregloEntero()
        //| inicializarArregloCadena()
        //| SentenciasProcedimientos()
        | SentenciasFunciones()
}

void declararVariable() : {Token t,t1, t3;}
{
    try {
        <VAR> t =  <IDENTIFICADOR>
        t1 = tipoDato()
        {
            if(tablaSimbolos.contains(t.image)) tabla2.add("Error semántico: La variable " + t.image + " ya ha sido declarada");
            else tablaSimbolos.addSymbol(t.image, t1.image);
            translator.translateVariableDeclaration(t1.image,t.image);
        }
        
        <DELIMITADOR>

    } catch (ParseException e) {
        tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
    }
}

Token tipoDato() : {Token t = null;}
{
    (t = <ENT>
    | t = <FLOT>
    | t = <BOOL>
    | t = <CAD>
    )
    {
        return t;
    }
}

Token valor2(String tipoEsperado) : {Token t;}
{
    t = <ENTEROS> {
        if (!tipoEsperado.equals("ent") && !tipoEsperado.isEmpty()) {
            tabla2.add("Error semántico: Se esperaba un valor de tipo " + tipoEsperado + " pero se encontró un entero");
        }
        return t;
    }
    | t = <VCAD> {
        if (!tipoEsperado.equals("cad") && !tipoEsperado.isEmpty()) {
            tabla2.add("Error semántico: Se esperaba un valor de tipo " + tipoEsperado + " pero se encontró una cadena");
        }
        return t;
    }
    | t = <NUMERODECIMAL> {
        if (!tipoEsperado.equals("flot") && !tipoEsperado.isEmpty()) {
            tabla2.add("Error semántico: Se esperaba un valor de tipo " + tipoEsperado + " pero se encontró un número decimal");
        }
        return t;
    }
    | t = <IDENTIFICADOR> {
        if (!tablaSimbolos.contains(t.image) && !tipoEsperado.isEmpty()) {
            tabla2.add("Error semántico: La variable " + t.image + " no ha sido declarada");
        } else if (!tablaSimbolos.checkType(t.image, tipoEsperado)) {
            tabla2.add("Error semántico: Se esperaba un valor de tipo " + tipoEsperado + " pero se encontró " + tablaSimbolos.getType(t.image));
        }
        return t;
    }
}

void valor() : {}
{
    <ENTEROS> | <VCAD> | <NUMERODECIMAL> | <IDENTIFICADOR>
}

void gramaticaEscribir() : {Token t = null, t1 = null; StringBuilder sb = new StringBuilder();}
{
    try {
        <ESCRIBIR> <PARENIZQ>  
        (    
        (t =<VCAD> | t = <IDENTIFICADOR>)
        {
            if (t.kind == IDENTIFICADOR && !tablaSimbolos.contains(t.image)) 
                tabla2.add("Error semántico: La variable " + t.image + " no ha sido declarada");
            sb.append(t.image);
        }
        (<CONCATENAR> (t1 = <VCAD> | t1 = <IDENTIFICADOR>)
        {
            if(t1.kind == IDENTIFICADOR && !tablaSimbolos.contains(t1.image)) 
                tabla2.add("Error semántico: La variable " + t1.image + " no ha sido declarada");
            sb.append(" << " + t1.image);
        }
        )*
        )+
         <PARENDER> <DELIMITADOR>
        {
            translator.translateWrite(sb.toString());
        }
    } catch (ParseException e) {
        tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
    }
}

void gramaticaLeer() : {Token t;}
{
    try {
        <LEER> <PARENIZQ>
          t =  <IDENTIFICADOR>
           {
            translator.translateRead(t.image);
           }
        <PARENDER> <DELIMITADOR>
    } catch (ParseException e) {
        tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
    }
}

void gramaticaSi() : {String res;}
{
    try {
        {
            tablaSimbolos.enterScope();
        }
            <SI> <PARENIZQ> 
            res = condicion()
            {
                translator.translateIf(res);
            }
            
            <PARENDER> <LLAVEIZQ> (Codigo())+ 
            {
                translator.generateKeyClose();
            }
            
            <LLAVEDER>
            ( gramaticaSiNo() )*
            {
                tablaSimbolos.exitScope();
            }
        } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }
}

void gramaticaSiNo() : {}
{
    try {
        {tablaSimbolos.enterScope();}
            <SINO> 
            {translator.translateElse();} 
            <LLAVEIZQ> (Codigo())+ <LLAVEDER>
            {
                tablaSimbolos.exitScope();
                translator.generateKeyClose();
            }
        } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }
}

String condicion() : {Token t1,t2,op;}
{
    try {
     t1 = valor2("") 
     op= OperadoresComparadores() 
     t2 = valor2("")
     {
        if(t1.kind == IDENTIFICADOR && !tablaSimbolos.contains(t1.image)){
            tabla2.add("Error semántico: La variable " + t1.image + " no ha sido declarada");
        }
        if(t2.kind == IDENTIFICADOR && !tablaSimbolos.contains(t2.image)){
            tabla2.add("Error semántico: La variable " + t2.image + " no ha sido declarada");
        }
        return t1.image + op.image + t2.image;
     }
     (condicionLogicos())*
    } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }
}

void condicionLogicos() : {}
{
    try {
    OperadoresLogicos() valor() OperadoresComparadores() valor()
    } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }
}

void OperadoresLogicos() : {}
{
     <AND> | <OR> | <NOT>
}

Token OperadoresComparadores() : {Token t;}
{
    (t  = <IGUALDAD> 
    |t =  <DESIGUALDAD> 
    |t =  <MAYOR> 
    |t =  <MENOR> 
    |t =  <MAYORIGUAL> 
    |t =  <MENORIGUAL>)
    {return t;}
}

void gramaticaWhile() : {String res;}
{
    try{
        {
            tablaSimbolos.enterScope();
        }
        <WHILE> <PARENIZQ> 
        res = condicion() 
        {
            translator.translateWhile(res);
        }
        <PARENDER> <LLAVEIZQ> (Codigo())+ <LLAVEDER> 
        {
            tablaSimbolos.exitScope();
            translator.generateKeyClose();
        }
    } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }
}

void gramaticaAsignacion(): {Token t = null; String exp = "";}
{
    try{
	        t = < IDENTIFICADOR >
	        < IGUAL >
	        (exp = operacionSimple(tablaSimbolos.getType(t.image))
	            {
	                 if(!tablaSimbolos.contains(t.image)){
                     tabla2.add("Error semántico: La variable " + t.image + " no ha sido declarada");
                    }
                    translator.translateVariableAssignment(t.image, exp);   
	            }
	        )
	        <DELIMITADOR>
        } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }
}

String operacionSimple(String type): {Token val1,val2,op; StringBuilder sb = new StringBuilder(); String operator = "";}
{
    try{
           ( val1 = valor2(type)
            {
                if(val1.kind == IDENTIFICADOR && !tablaSimbolos.contains(val1.image)){
                    tabla2.add("Error semántico: La variable " + val1.image + " no ha sido declarada");
                }
                sb.append(val1.image);
            }
            ( 
                (op = <MAS> | op = <MENOS> | op = <MULT> | op = <DIV> | op = <RES>)
                val2 = valor2(type)
                {
                    if(val2.kind == IDENTIFICADOR && !tablaSimbolos.contains(val2.image)){
                        tabla2.add("Error semántico: La variable " + val2.image + " no ha sido declarada");
                    }
                    operator = translator.translateOperator(op.image);
                    sb.append(operator).append(val2.image);
                }
            )*
           )+
            {
                return sb.toString();
            }
        } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }
}

String operacionParentesis(String type): {String t;}
{
    try{
	        < PARENIZQ > t = operacionSimple(type) < PARENDER >
	        {
	        return t;
	        }
        } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }
}

Token operadorAritmeticoMasMenos(): {Token t;}
{
	(t = < MAS > | t = < MENOS >)
	{return t;}
}

Token operadorAritmeticoMulDiv(): {Token t;}
{
	(t = < MULT> | t = < DIV> | t = <RES>)
	{return t;}
}

String termino(String type) : {String t1, t2, temp; Token op;}
{
    t1 = Factor(type)
    (
        op = operadorAritmeticoMulDiv() t2 = Factor(type) {
                       
        }
    )*
    { return t1; }
}

String Factor(String type) : {Token t; String t1;}
{
  t = valor2(type) {return t.image;}
  | t1 = operacionParentesis(type) {return t1;}


}

void gramaticaOperadorLogico(): {}
{
    try{
        < BOOL > <IDENTIFICADOR> 
        <IGUAL> 
            condicionLogico()
        <DELIMITADOR>
                } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }
}

void condicionLogico(): {}
{
    try{
        valor() OperadoresLogicos() valor()
                } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }
}

void gramaticaFor(): {
    String init = "", condition = "", increment = "";
}
{
    try {
        {tablaSimbolos.enterScope();}
        <FOR> <PARENIZQ>
            init = condicionFor()
        <PARENDER> <LLAVEIZQ> 
        {
            translator.translateFor(init, condition, increment);
        }
        (Codigo())+ 
        <LLAVEDER>
        {
            translator.generateKeyClose();
            tablaSimbolos.exitScope();
        }
    } catch (ParseException e) {
        tabla.add(manejarErrorSintactico(e));
    }
}

String condicionFor(): {
    Token tipo, id, num, idComp, opComp, val, idInc, op;
    String init = "", condition = "", increment = "";
}
{
    try {
        tipo = tipoDato() 
        id = <IDENTIFICADOR> 
        <IGUAL> 
        num = <ENTEROS> 
        {
            if(tablaSimbolos.contains(id.image)){
                tabla2.add("Error semántico: La variable " + id.image + " ya ha sido declarada");
            }
            else tablaSimbolos.addSymbol(id.image, tipo.image);
            init = translator.translateType(tipo.image) + " " + id.image + " = " + num.image;
        }
        <DELIMITADOR>
        
        idComp = <IDENTIFICADOR> 
        opComp = OperadoresComparadores() 
        val = valor2("")
        {
            if(!tablaSimbolos.contains(idComp.image)){
                tabla2.add("Error semántico: La variable " + idComp.image + " no ha sido declarada");
            }
            condition = idComp.image + " " + opComp.image + " " + val.image;
        }
        <DELIMITADOR>
        
        op = operadorIncDec() 
        idInc = <IDENTIFICADOR>
        {
            if(!tablaSimbolos.contains(idInc.image)){
                tabla2.add("Error semántico: La variable " + idInc.image + " no ha sido declarada");
            }
            increment = idInc.image + (op.image.equals("inc") ? "++" : "--");
            return init + ";" + condition + ";" + increment;
        }
    } catch (ParseException e) {
        tabla.add(manejarErrorSintactico(e));
        return "";
    }
}

Token operadorIncDec(): {Token t;}
{
    (
        t = <INC> | t = <DEC>
    )
    {
        return t;
    }
}


void SentenciasFunciones() : {Token t, t1; String count = "";}
{
    try{
        <FUNC> (t1 = tipoDato() t = <IDENTIFICADOR>
        {
            if(tablaSimbolos.contains(t.image)) tabla2.add("Error semántico: La variable " + t.image + " ya ha sido declarada");
            else tablaSimbolos.addSymbol(t.image, t1.image);
            translator.translateFunctionStart(translator.translateType(t1.image), t.image);
        }
        <PARENIZQ>
        [count = parametros()]
        <PARENDER>
        <LLAVEIZQ>
        {tablaSimbolos.enterScope();}
        (
           Codigo()
        )*
        <RETURN> t1 = valor2(t1.image) <DELIMITADOR>
        {
            translator.translateReturn(t1.image);
        }
        <LLAVEDER> <DELIMITADOR>
        {
            translator.generateKeyClose();
            if(count != ""){
            tablaParametros.addSymbol(t.image, count);
            }else{
            paraCount1 = 0;
            }
        }
        | t1 = <VOID> t = <IDENTIFICADOR>
            {
                if(tablaSimbolos.contains(t.image)) tabla2.add("Error semántico: La variable " + t.image + " ya ha sido declarada");
                else tablaSimbolos.addSymbol(t.image, t1.image);
                translator.translateFunctionStart("void", t.image);
            }
            <PARENIZQ>
            [count = parametros()]
            <PARENDER>
            <LLAVEIZQ>
            {tablaSimbolos.enterScope();}
            (
            Codigo()
            )*
            <LLAVEDER> <DELIMITADOR>
        {
            translator.generateKeyClose();
            if(count != ""){
            tablaParametros.addSymbol(t.image, count);
            }else{
            paraCount1 = 0;
            }
        }
        )
        {tablaSimbolos.exitScope();}
    } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }
}

//Parametro a agregar en funciones
String parametros() : {Token t, t1;}
{
    try{
        t =  <IDENTIFICADOR>
             t1 = tipoDato()
             {
               if(tablaSimbolos.contains(t.image)) tabla2.add("Error semántico: La variable " + t.image + " ya ha sido declarada");
               else tablaSimbolos.addSymbol(t.image, t1.image);
               translator.translateParameter(translator.translateType(t1.image), t.image);
             }
        ( <COMA> t =  <IDENTIFICADOR>
                      t1 = tipoDato()
                      {
                        if(tablaSimbolos.contains(t.image)) tabla2.add("Error semántico: La variable " + t.image + " ya ha sido declarada");
                        else tablaSimbolos.addSymbol(t.image, t1.image);
                        translator.translateParameter(translator.translateType(t1.image), t.image);
                        paraCount1++;
                      }
        )* {return String.valueOf(paraCount1);
        paraCount1 = 1;}
    } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }
}

//Metodo para llamar a una funcion (Falta semantico)
void llamarFuncion() : {Token t;}
{
    try{
    <FUNC> t = <IDENTIFICADOR>
	{
        if(!tablaSimbolos.contains(t.image)){
        tabla2.add("Error semántico: La variable " + t.image + " no ha sido declarada");
        }
    }
    <PARENIZQ> valor() (<COMA> valor() {paraCount2++;})*  <PARENDER> {
    if(paraCount1 != 0){
    if(paraCount2 != Integer.parseInt(tablaParametros.getType(t.image))){
            tabla2.add("Error semántico: Cantidad de parametros no cuadra");
            paraCount2 = 1;
        }
    paraCount1 = 1;
    }
    }
    } catch (ParseException e) {
        tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
    }
}

