/* AnalizadorARM.java */
/* Generated By:JavaCC: Do not edit this line. AnalizadorARM.java */
import java.io.*;
import java.util.ArrayList;

public class AnalizadorARM implements AnalizadorARMConstants {
    static ArrayList<String> tabla = AnalizadorARMTokenManager.tablaErrores;

    public static void main(String[] args) {
        try {
            String nombreArchivo = args[0];
            FileReader lector = new FileReader(nombreArchivo);
            AnalizadorARM parser = new AnalizadorARM(lector);

            parser.parse(nombreArchivo);

            if (tabla.size() != 0) {
                System.out.println("\u005cn ==================================================================================== \u005cn");
                System.out.println("\u005cn** Se encontraron errores sint\u00c3\u00a1cticos en el c\u00c3\u00b3digo **\u005cn");
                for (String error : tabla) {
                    System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ \u005cn");
                    System.out.println(error);
                }
            } else {
                System.out.println("\u005cn ==================================================================================== \u005cn");
                System.out.println("\u005ct ** NO se encontraron errores sint\u00c3\u00a1cticos en el c\u00c3\u00b3digo ** ");
            }
        } catch (FileNotFoundException fe) {
            System.out.println(fe.getMessage());
        } catch (IOException io) {
            System.out.println(io.getMessage());
        }
    }

    public void parse(String nombreArchivo) throws IOException {
        Token token;
        int columna = 1; // Contador de columna
        FileReader lector = new FileReader(nombreArchivo);
        AnalizadorARMTokenManager lexicManager = new AnalizadorARMTokenManager(new SimpleCharStream(lector));

        boolean seEncontraronErrores = false;
        boolean seVerificaronTokens = false;

        // Analiza los tokens léxicos
        while ((token = lexicManager.getNextToken()).kind != AnalizadorARMConstants.EOF) {
            seVerificaronTokens = true;
            if (token.specialToken != null) {
                String specialTokenImage = token.specialToken.image;
                for (int i = 0; i < specialTokenImage.length(); i++) {
                    if (specialTokenImage.charAt(i) == '\u005cn') {
                        columna = 1; // Reiniciar el contador de columna en cada salto de línea
                    }
                }
            }
            if (token.kind == AnalizadorARMConstants.ERROR) {
                if (!seEncontraronErrores) {
                    System.out.print("\u005ct ** Se encontraron errores l\u00c3\u00a9xicos en el c\u00c3\u00b3digo ** \u005cn");
                    seEncontraronErrores = true;
                }
                System.out.print("Error l\u00c3\u00a9xico en l\u00c3\u00adnea " + (token.beginLine) + ", columna " + columna + "\u005cn");
                System.out.print("Car\u00c3\u00a1cter inv\u00c3\u00a1lido: " + (char) token.image.charAt(0) + "\u005cn");
            } else {
                columna += token.image.length(); // Incrementar el contador de columna por la longitud del token
            }
        }

        if (!seEncontraronErrores && seVerificaronTokens) {
            System.out.print("\u005ct ** NO se encontraron errores l\u00c3\u00a9xicos en el c\u00c3\u00b3digo ** \u005cn");
        }

        // Ahora intenta analizar la gramática
        try {
            principal();  // Aquí comienza el análisis de la gramática
        } catch (ParseException e) {
            tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla
        }
    }

    String manejarErrorSintactico(ParseException e) {
        // Traduce el mensaje de error de inglés a español
        String mensajeOriginal = e.getMessage();
        String mensajeTraducido = mensajeOriginal
            .replace("Encountered", "Encontrado")
            .replace("at line", "en la l\u00c3\u00adnea")
            .replace("column", "columna")
            .replace("Was expecting:", "Se esperaba:")
            .replace("Was expecting one of:", "Se espera una de estas opciones:");

        // Retorna el mensaje de error traducido
        return "Error sint\u00c3\u00a1ctico: " + mensajeTraducido + "\u005cn" + "Token actual: " + e.currentToken + "\u005cn";

    }

  final public void principal() throws ParseException {
    try {
      jj_consume_token(INICIO);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(LLAVEIZQ);
      label_1:
      while (true) {
        Codigo();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENT:
        case BOOL:
        case CAD:
        case VAR:
        case FOR:
        case WHILE:
        case SI:
        case LEER:
        case ESCRIBIR:
        case PROC:
        case FUNC:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(LLAVEDER);
      jj_consume_token(FIN);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void Codigo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      declararVariable();
      break;
      }
    case ESCRIBIR:{
      gramaticaEscribir();
      break;
      }
    case LEER:{
      gramaticaLeer();
      break;
      }
    case SI:{
      gramaticaSi();
      break;
      }
    case WHILE:{
      gramaticaWhile();
      break;
      }
    case IDENTIFICADOR:{
      gramaticaAsignacion();
      break;
      }
    case BOOL:{
      gramaticaOperadorLogico();
      break;
      }
    case FOR:{
      gramaticaFor();
      break;
      }
    case ENT:{
      inicializarArregloEntero();
      break;
      }
    case CAD:{
      inicializarArregloCadena();
      break;
      }
    case PROC:{
      SentenciasProcedimientos();
      break;
      }
    case FUNC:{
      SentenciasFunciones();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void declararVariable() throws ParseException {
    try {
      jj_consume_token(VAR);
      jj_consume_token(IDENTIFICADOR);
      tipoDato();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:{
        jj_consume_token(IGUAL);
        valor();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(DELIMITADOR);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void tipoDato() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENT:{
      jj_consume_token(ENT);
      break;
      }
    case FLOT:{
      jj_consume_token(FLOT);
      break;
      }
    case BOOL:{
      jj_consume_token(BOOL);
      break;
      }
    case CAD:{
      jj_consume_token(CAD);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void valor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENTEROS:{
      jj_consume_token(ENTEROS);
      break;
      }
    case VCAD:{
      jj_consume_token(VCAD);
      break;
      }
    case NUMERODECIMAL:{
      jj_consume_token(NUMERODECIMAL);
      break;
      }
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void gramaticaEscribir() throws ParseException {
    try {
      jj_consume_token(ESCRIBIR);
      jj_consume_token(PARENIZQ);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VCAD:{
          jj_consume_token(VCAD);
          break;
          }
        case IDENTIFICADOR:{
          jj_consume_token(IDENTIFICADOR);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CONCATENAR:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_3;
          }
          jj_consume_token(CONCATENAR);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VCAD:{
            jj_consume_token(VCAD);
            break;
            }
          case IDENTIFICADOR:{
            jj_consume_token(IDENTIFICADOR);
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFICADOR:
        case VCAD:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(PARENDER);
      jj_consume_token(DELIMITADOR);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void gramaticaLeer() throws ParseException {
    try {
      jj_consume_token(LEER);
      jj_consume_token(PARENIZQ);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(PARENDER);
      jj_consume_token(DELIMITADOR);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void gramaticaSi() throws ParseException {
    try {
      jj_consume_token(SI);
      jj_consume_token(PARENIZQ);
      label_4:
      while (true) {
        condicion();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENTEROS:
        case NUMERODECIMAL:
        case IDENTIFICADOR:
        case VCAD:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
      }
      jj_consume_token(PARENDER);
      jj_consume_token(LLAVEIZQ);
      label_5:
      while (true) {
        Codigo();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENT:
        case BOOL:
        case CAD:
        case VAR:
        case FOR:
        case WHILE:
        case SI:
        case LEER:
        case ESCRIBIR:
        case PROC:
        case FUNC:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
      }
      jj_consume_token(LLAVEDER);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SINO:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        gramaticaSiNo();
      }
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void gramaticaSiNo() throws ParseException {
    try {
      jj_consume_token(SINO);
      jj_consume_token(LLAVEIZQ);
      label_7:
      while (true) {
        Codigo();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENT:
        case BOOL:
        case CAD:
        case VAR:
        case FOR:
        case WHILE:
        case SI:
        case LEER:
        case ESCRIBIR:
        case PROC:
        case FUNC:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
      }
      jj_consume_token(LLAVEDER);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void condicion() throws ParseException {
    try {
      valor();
      OperadoresComparadores();
      valor();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:
        case OR:
        case NOT:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_8;
        }
        condicionLogicos();
      }
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void condicionLogicos() throws ParseException {
    try {
      OperadoresLogicos();
      valor();
      OperadoresComparadores();
      valor();
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void OperadoresLogicos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
      break;
      }
    case OR:{
      jj_consume_token(OR);
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OperadoresComparadores() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUALDAD:{
      jj_consume_token(IGUALDAD);
      break;
      }
    case DESIGUALDAD:{
      jj_consume_token(DESIGUALDAD);
      break;
      }
    case MAYOR:{
      jj_consume_token(MAYOR);
      break;
      }
    case MENOR:{
      jj_consume_token(MENOR);
      break;
      }
    case MAYORIGUAL:{
      jj_consume_token(MAYORIGUAL);
      break;
      }
    case MENORIGUAL:{
      jj_consume_token(MENORIGUAL);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void gramaticaWhile() throws ParseException {
    try {
      jj_consume_token(WHILE);
      jj_consume_token(PARENIZQ);
      condicion();
      jj_consume_token(PARENDER);
      jj_consume_token(LLAVEIZQ);
      label_9:
      while (true) {
        Codigo();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENT:
        case BOOL:
        case CAD:
        case VAR:
        case FOR:
        case WHILE:
        case SI:
        case LEER:
        case ESCRIBIR:
        case PROC:
        case FUNC:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
      }
      jj_consume_token(LLAVEDER);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void gramaticaAsignacion() throws ParseException {
    try {
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(IGUAL);
      operacionSimple();
      jj_consume_token(DELIMITADOR);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void operacionSimple() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENTEROS:
      case NUMERODECIMAL:
      case IDENTIFICADOR:
      case VCAD:{
        valor();
        break;
        }
      case PARENIZQ:{
        operacionParentesis();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MAS:
        case MENOS:
        case MULT:
        case DIV:
        case RES:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_10;
        }
        operadorAritmetico();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENTEROS:
        case NUMERODECIMAL:
        case IDENTIFICADOR:
        case VCAD:{
          valor();
          break;
          }
        case PARENIZQ:{
          operacionParentesis();
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void operacionParentesis() throws ParseException {
    try {
      jj_consume_token(PARENIZQ);
      operacionSimple();
      jj_consume_token(PARENDER);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void operadorAritmetico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAS:{
      jj_consume_token(MAS);
      break;
      }
    case MENOS:{
      jj_consume_token(MENOS);
      break;
      }
    case MULT:{
      jj_consume_token(MULT);
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
      break;
      }
    case RES:{
      jj_consume_token(RES);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void gramaticaOperadorLogico() throws ParseException {
    try {
      jj_consume_token(BOOL);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(IGUAL);
      condicionLogico();
      jj_consume_token(DELIMITADOR);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void condicionLogico() throws ParseException {
    try {
      valor();
      OperadoresLogicos();
      valor();
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void gramaticaFor() throws ParseException {
    try {
      jj_consume_token(FOR);
      jj_consume_token(PARENIZQ);
      condicionFor();
      jj_consume_token(PARENDER);
      jj_consume_token(LLAVEIZQ);
      label_11:
      while (true) {
        Codigo();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENT:
        case BOOL:
        case CAD:
        case VAR:
        case FOR:
        case WHILE:
        case SI:
        case LEER:
        case ESCRIBIR:
        case PROC:
        case FUNC:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_11;
        }
      }
      jj_consume_token(LLAVEDER);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void condicionFor() throws ParseException {
    try {
      tipoDato();
      comparacionForIgual();
      jj_consume_token(DELIMITADOR);
      comparacionFor();
      jj_consume_token(DELIMITADOR);
      operadorIncDec();
      jj_consume_token(IDENTIFICADOR);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void comparacionFor() throws ParseException {
    try {
      jj_consume_token(IDENTIFICADOR);
      OperadoresComparadores();
      valor();
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void comparacionForIgual() throws ParseException {
    try {
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(IGUAL);
      jj_consume_token(ENTEROS);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void operadorIncDec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INC:{
      jj_consume_token(INC);
      break;
      }
    case DEC:{
      jj_consume_token(DEC);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void inicializarArregloEntero() throws ParseException {
    try {
      jj_consume_token(ENT);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(CORCHIZQ);
      jj_consume_token(ENTEROS);
      jj_consume_token(CORCHDER);
      jj_consume_token(IGUAL);
      jj_consume_token(LLAVEIZQ);
      jj_consume_token(ENTEROS);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMA);
        jj_consume_token(ENTEROS);
      }
      jj_consume_token(LLAVEDER);
      jj_consume_token(DELIMITADOR);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void inicializarArregloCadena() throws ParseException {
    try {
      jj_consume_token(CAD);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(CORCHIZQ);
      jj_consume_token(ENTEROS);
      jj_consume_token(CORCHDER);
      jj_consume_token(IGUAL);
      jj_consume_token(LLAVEIZQ);
      jj_consume_token(VCAD);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMA);
        jj_consume_token(VCAD);
      }
      jj_consume_token(LLAVEDER);
      jj_consume_token(DELIMITADOR);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void SentenciasProcedimientos() throws ParseException {
    try {
      jj_consume_token(PROC);
      PalabrasReservadas();
      jj_consume_token(VOID);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(PARENIZQ);
      jj_consume_token(PARENDER);
      jj_consume_token(LLAVEIZQ);
      label_14:
      while (true) {
        Codigo();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENT:
        case BOOL:
        case CAD:
        case VAR:
        case FOR:
        case WHILE:
        case SI:
        case LEER:
        case ESCRIBIR:
        case PROC:
        case FUNC:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          break label_14;
        }
      }
      jj_consume_token(LLAVEDER);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void SentenciasFunciones() throws ParseException {
    try {
      jj_consume_token(FUNC);
      PalabrasReservadas();
      tipoDato();
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(PARENIZQ);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENT:
      case FLOT:
      case BOOL:
      case CAD:{
        parametros();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(PARENDER);
      jj_consume_token(LLAVEIZQ);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENT:
        case BOOL:
        case CAD:
        case VAR:
        case FOR:
        case WHILE:
        case SI:
        case LEER:
        case ESCRIBIR:
        case PROC:
        case FUNC:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          break label_15;
        }
        Codigo();
      }
      returnStatement();
      jj_consume_token(LLAVEDER);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void returnStatement() throws ParseException {
    try {
      jj_consume_token(RETURN);
      valor();
      jj_consume_token(DELIMITADOR);
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void parametros() throws ParseException {
    try {
      tipoDato();
      jj_consume_token(IDENTIFICADOR);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_16;
        }
        jj_consume_token(COMA);
        tipoDato();
        jj_consume_token(IDENTIFICADOR);
      }
    } catch (ParseException e) {
tabla.add(manejarErrorSintactico(e)); // Agregar error a la tabla

    }
  }

  final public void PalabrasReservadas() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PUBLICO:{
      jj_consume_token(PUBLICO);
      break;
      }
    case PRIVADO:{
      jj_consume_token(PRIVADO);
      break;
      }
    case ESTATICO:{
      jj_consume_token(ESTATICO);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public AnalizadorARMTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x600003a0,0x600003a0,0x200000,0x1e0,0x18000000,0x0,0x0,0x0,0x0,0x18000000,0x600003a0,0x0,0x600003a0,0xe0000,0xe0000,0x7d00000,0x600003a0,0x18000000,0x7c00,0x18000000,0x7c00,0x600003a0,0x18000,0x0,0x0,0x600003a0,0x1e0,0x600003a0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8000001a,0x8000001a,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x8000001a,0x4,0x8000001a,0x0,0x0,0x0,0x8000001a,0x1000,0x0,0x1000,0x0,0x8000001a,0x0,0x80,0x80,0x8000001a,0x0,0x8000001a,0x80,0x70000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x3,0x3,0x0,0x0,0x6,0x6,0x0,0x6,0x6,0x6,0x3,0x0,0x3,0x0,0x0,0x0,0x3,0x6,0x0,0x6,0x0,0x3,0x0,0x0,0x0,0x3,0x0,0x3,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public AnalizadorARM(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorARM(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorARMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorARM(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorARMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorARM(AnalizadorARMTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorARMTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
